"use client";

import React from "react";
import { getLogs } from "@/lib/api/logs";
import { ExecutionLog } from "@/types/logs";
import { ExecutionPhase } from "@/types/phases";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { cn } from "@/lib/utils";
import { useQuery } from "@tanstack/react-query";
import { toast } from "sonner";

interface PhaseLogsProps {
  phase: ExecutionPhase;
  token: string;
  isRunning: boolean;
}

export function PhaseLogs({ phase, token, isRunning }: Readonly<PhaseLogsProps>) {
    const logsQuery = useQuery<ExecutionLog[]>({
        queryKey: ["phaseLogs", phase.id],
        queryFn: () => getLogs(token, phase.id),
        refetchInterval: isRunning ? 1000 : false,
        enabled: !!phase && !!token
      });
    
      if (logsQuery.isLoading || logsQuery.isFetching) {
        return <LogsSkeleton />; 
      }
    
      if (logsQuery.isError) {
        toast.error("Failed to load logs");
        return null;
      }
    
      return <LogSection logs={logsQuery.data ?? []} />;
}

const LogSection = ({logs}: {logs: ExecutionLog[]}) => {
    return (
        <Card className='w-full'>
            <CardHeader className='rounded-lg rounded-b-none border-b py-4 bg-gray-50 dark:bg-background'>
                <CardTitle className='text-base'>Execution Logs</CardTitle>
                <CardDescription className='text-muted-foreground text-sm'>
                    Logs generated by this phase
                </CardDescription>
            </CardHeader>
            <CardContent className='py-0'>
                <Table>
                    <TableHeader className='text-muted-foreground text-sm'>
                        <TableRow>
                            <TableHead>Time</TableHead>
                            <TableHead>Level</TableHead>
                            <TableHead>Message</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {logs.map((log) => (
                            <TableRow key={log.id} className='text-muted-foreground'>
                                <TableCell width={190} className='text-xs text-muted-foreground
                                p-[2px] pl-4'>{log.timestamp}</TableCell>
                                <TableCell width={80} className={cn(
                                    'uppercase text-xs font-bold p-[3px] pl-4',
                                log.log_level === 'error' && 'text-destructive',
                                log.log_level === 'warning' && 'text-warning',
                                log.log_level === "info" && 'text-green-500',
                                )}>{log.log_level}</TableCell>
                                <TableCell className='text-sm flex-1 p-[3px] pl-4'>{log.message}</TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    )
}

const LogsSkeleton = () => {
    return (
      <div className="space-y-2 p-4">
        {[1, 2, 3, 4, 5].map((n) => (
          <div key={n} className="h-5 w-full bg-gray-100 dark:bg-gray-800 animate-pulse" />
        ))}
      </div>
    );
}
  