name: Deploy Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'infra/tf/**'
      - '.github/workflows/deploy-infrastructure.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      infrastructure_type:
        description: 'Type of infrastructure to deploy'
        required: true
        default: 'ultra-cost-optimized'
        type: choice
        options:
          - standard
          - ultra-cost-optimized

permissions:
  id-token: write
  contents: read

env:
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
  INFRASTRUCTURE_TYPE: ${{ github.event.inputs.infrastructure_type || 'ultra-cost-optimized' }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActionsInfraDeployment
          role-duration-seconds: 3600

      - name: Set Infrastructure Path
        id: infra-path
        run: |
          # Set the infrastructure path based on the input
          if [ "${{ env.INFRASTRUCTURE_TYPE }}" = "standard" ]; then
            echo "INFRA_PATH=infra/tf" >> $GITHUB_OUTPUT
            echo "Using standard infrastructure path: infra/tf"
          else
            echo "INFRA_PATH=infra/tf/ultra-cost-optimized" >> $GITHUB_OUTPUT
            echo "Using ultra-cost-optimized infrastructure path: infra/tf/ultra-cost-optimized"
          fi

      - name: Check DynamoDB permissions
        id: check-dynamodb
        run: |
          # Get the infrastructure path
          INFRA_PATH="${{ steps.infra-path.outputs.INFRA_PATH }}"

          # For standard infrastructure
          if [ "${{ env.INFRASTRUCTURE_TYPE }}" = "standard" ]; then
            # Get the DynamoDB table name from the backend config
            DYNAMODB_TABLE=$(grep -o 'dynamodb_table = "[^"]*"' infra/tf/backend.${{ env.ENVIRONMENT }}.tfbackend | cut -d'"' -f2)
          else
            # For ultra-cost-optimized, use a default table name
            DYNAMODB_TABLE="workflow-build-tf-lock-${{ env.ENVIRONMENT }}"
          fi

          echo "DynamoDB table for state locking: $DYNAMODB_TABLE"

          # Check if we have permissions to access the DynamoDB table
          if ! aws dynamodb describe-table --table-name $DYNAMODB_TABLE 2>/dev/null; then
            echo "Warning: No permissions to access DynamoDB table $DYNAMODB_TABLE"
            echo "Will disable state locking for this run"
            echo "LOCK_FLAG=-lock=false" >> $GITHUB_OUTPUT
          else
            echo "DynamoDB permissions verified"
            echo "LOCK_FLAG=" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        working-directory: ${{ steps.infra-path.outputs.INFRA_PATH }}
        run: |
          # For standard infrastructure
          if [ "${{ env.INFRASTRUCTURE_TYPE }}" = "standard" ]; then
            terraform init -backend-config=backend.${{ env.ENVIRONMENT }}.tfbackend ${{ steps.check-dynamodb.outputs.LOCK_FLAG }}
          else
            # For ultra-cost-optimized, initialize without backend config
            terraform init ${{ steps.check-dynamodb.outputs.LOCK_FLAG }}
          fi

      - name: Terraform Validate
        working-directory: ${{ steps.infra-path.outputs.INFRA_PATH }}
        run: |
          terraform validate

      - name: Check Required Variables
        id: check-vars
        run: |
          # Check if DB_PASSWORD is set
          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then
            echo "ERROR: DB_PASSWORD secret is not set."
            echo "You must set the DB_PASSWORD secret in your GitHub repository settings."
            echo "This is a required variable and the workflow cannot proceed without it."
            exit 1
          else
            echo "DB_PASSWORD is set."
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_OUTPUT
          fi

          # Check if SECRET_ENCRYPTION_PASSWORD is set
          if [ -z "${{ secrets.SECRET_ENCRYPTION_PASSWORD }}" ]; then
            echo "ERROR: SECRET_ENCRYPTION_PASSWORD secret is not set."
            echo "You must set the SECRET_ENCRYPTION_PASSWORD secret in your GitHub repository settings."
            echo "This is a required variable and the workflow cannot proceed without it."
            exit 1
          else
            echo "SECRET_ENCRYPTION_PASSWORD is set."
            echo "SECRET_ENCRYPTION_PASSWORD=${{ secrets.SECRET_ENCRYPTION_PASSWORD }}" >> $GITHUB_OUTPUT
          fi

          # Check if SECRET_ENCRYPTION_SALT is set
          if [ -z "${{ secrets.SECRET_ENCRYPTION_SALT }}" ]; then
            echo "ERROR: SECRET_ENCRYPTION_SALT secret is not set."
            echo "You must set the SECRET_ENCRYPTION_SALT secret in your GitHub repository settings."
            echo "This is a required variable and the workflow cannot proceed without it."
            exit 1
          else
            echo "SECRET_ENCRYPTION_SALT is set."
            echo "SECRET_ENCRYPTION_SALT=${{ secrets.SECRET_ENCRYPTION_SALT }}" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Plan
        working-directory: ${{ steps.infra-path.outputs.INFRA_PATH }}
        id: plan
        run: |
          # Use the variables from the check-vars step
          if [ "${{ env.INFRASTRUCTURE_TYPE }}" = "standard" ]; then
            # For standard infrastructure
            terraform plan ${{ steps.check-dynamodb.outputs.LOCK_FLAG }} \
              -var-file=environments/${{ env.ENVIRONMENT }}.tfvars \
              -var="db_password=${{ steps.check-vars.outputs.DB_PASSWORD }}" \
              -var="secret_encryption_password=${{ steps.check-vars.outputs.SECRET_ENCRYPTION_PASSWORD }}" \
              -var="secret_encryption_salt=${{ steps.check-vars.outputs.SECRET_ENCRYPTION_SALT }}" \
              -out=tfplan
          else
            # For ultra-cost-optimized infrastructure
            terraform plan ${{ steps.check-dynamodb.outputs.LOCK_FLAG }} \
              -var="db_password=${{ steps.check-vars.outputs.DB_PASSWORD }}" \
              -var="secret_encryption_password=${{ steps.check-vars.outputs.SECRET_ENCRYPTION_PASSWORD }}" \
              -var="secret_encryption_salt=${{ steps.check-vars.outputs.SECRET_ENCRYPTION_SALT }}" \
              -out=tfplan
          fi

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ steps.infra-path.outputs.INFRA_PATH }}/tfplan
          retention-days: 1

      - name: Save Infrastructure Type
        id: save-infra-type
        run: |
          echo "INFRA_TYPE=${{ env.INFRASTRUCTURE_TYPE }}" >> $GITHUB_OUTPUT
          echo "INFRA_PATH=${{ steps.infra-path.outputs.INFRA_PATH }}" >> $GITHUB_OUTPUT

  approval:
    name: Manual Approval Required
    needs: terraform-plan
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: Manual approval step
        run: |
          echo "Terraform plan completed successfully!"
          echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
          echo "Infrastructure Type: ${{ github.event.inputs.infrastructure_type || 'ultra-cost-optimized' }}"
          echo ""
          echo "This job requires manual approval before proceeding with terraform apply."
          echo "Please review the terraform plan output above before approving."
          echo "‚úÖ Click 'Approve and run' to proceed with the deployment."

  terraform-apply:
    name: Terraform Apply
    needs: [approval, terraform-plan]
    environment: ${{ github.event.inputs.environment || 'dev' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActionsInfraApply
          role-duration-seconds: 3600

      - name: Set Infrastructure Path
        id: infra-path
        run: |
          # Set the infrastructure path based on the input
          if [ "${{ github.event.inputs.infrastructure_type || 'ultra-cost-optimized' }}" = "standard" ]; then
            echo "INFRA_PATH=infra/tf" >> $GITHUB_OUTPUT
            echo "Using standard infrastructure path: infra/tf"
          else
            echo "INFRA_PATH=infra/tf/ultra-cost-optimized" >> $GITHUB_OUTPUT
            echo "Using ultra-cost-optimized infrastructure path: infra/tf/ultra-cost-optimized"
          fi

      - name: Verify Plan File
        run: |
          echo "üîç Verifying terraform plan file exists..."
          if [ ! -f "${{ steps.infra-path.outputs.INFRA_PATH }}/tfplan" ]; then
            echo "‚ùå ERROR: Terraform plan file not found!"
            echo "The plan file should have been created in the terraform-plan job."
            exit 1
          else
            echo "‚úÖ Terraform plan file found and ready for apply."
          fi

      - name: Check DynamoDB permissions
        id: check-dynamodb-apply
        run: |
          # Get the infrastructure path
          INFRA_PATH="${{ steps.infra-path.outputs.INFRA_PATH }}"

          # For standard infrastructure
          if [ "${{ github.event.inputs.infrastructure_type || 'ultra-cost-optimized' }}" = "standard" ]; then
            # Get the DynamoDB table name from the backend config
            DYNAMODB_TABLE=$(grep -o 'dynamodb_table = "[^"]*"' infra/tf/backend.${{ github.event.inputs.environment || 'dev' }}.tfbackend | cut -d'"' -f2)
          else
            # For ultra-cost-optimized, use a default table name
            DYNAMODB_TABLE="workflow-build-tf-lock-${{ github.event.inputs.environment || 'dev' }}"
          fi

          echo "DynamoDB table for state locking: $DYNAMODB_TABLE"

          # Check if we have permissions to access the DynamoDB table
          if ! aws dynamodb describe-table --table-name $DYNAMODB_TABLE 2>/dev/null; then
            echo "Warning: No permissions to access DynamoDB table $DYNAMODB_TABLE"
            echo "Will disable state locking for this run"
            echo "LOCK_FLAG=-lock=false" >> $GITHUB_OUTPUT
          else
            echo "DynamoDB permissions verified"
            echo "LOCK_FLAG=" >> $GITHUB_OUTPUT
          fi

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ steps.infra-path.outputs.INFRA_PATH }}

      - name: Terraform Init
        working-directory: ${{ steps.infra-path.outputs.INFRA_PATH }}
        run: |
          # For standard infrastructure
          if [ "${{ github.event.inputs.infrastructure_type || 'ultra-cost-optimized' }}" = "standard" ]; then
            terraform init -backend-config=backend.${{ github.event.inputs.environment || 'dev' }}.tfbackend ${{ steps.check-dynamodb-apply.outputs.LOCK_FLAG }}
          else
            # For ultra-cost-optimized, initialize without backend config
            terraform init ${{ steps.check-dynamodb-apply.outputs.LOCK_FLAG }}
          fi

      - name: Terraform Apply
        working-directory: ${{ steps.infra-path.outputs.INFRA_PATH }}
        run: |
          # Apply the saved plan file - no additional variables needed since they're already in the plan
          terraform apply ${{ steps.check-dynamodb-apply.outputs.LOCK_FLAG }} -auto-approve tfplan
