name: Deploy Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'infra/tf/**'
      - '.github/workflows/deploy-infrastructure.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check DynamoDB permissions
        id: check-dynamodb
        run: |
          # Get the DynamoDB table name from the backend config
          DYNAMODB_TABLE=$(grep -o 'dynamodb_table = "[^"]*"' infra/tf/backend.${{ github.event.inputs.environment || 'dev' }}.tfbackend | cut -d'"' -f2)
          echo "DynamoDB table for state locking: $DYNAMODB_TABLE"

          # Check if we have permissions to access the DynamoDB table
          if ! aws dynamodb describe-table --table-name $DYNAMODB_TABLE 2>/dev/null; then
            echo "Warning: No permissions to access DynamoDB table $DYNAMODB_TABLE"
            echo "Will disable state locking for this run"
            echo "LOCK_FLAG=-lock=false" >> $GITHUB_OUTPUT
          else
            echo "DynamoDB permissions verified"
            echo "LOCK_FLAG=" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        working-directory: infra/tf
        run: |
          terraform init -backend-config=backend.${{ github.event.inputs.environment || 'dev' }}.tfbackend ${{ steps.check-dynamodb.outputs.LOCK_FLAG }}

      - name: Terraform Validate
        working-directory: infra/tf
        run: |
          terraform validate

      - name: Check Required Variables
        id: check-vars
        run: |
          # Check if DB_PASSWORD is set
          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then
            echo "ERROR: DB_PASSWORD secret is not set."
            echo "You must set the DB_PASSWORD secret in your GitHub repository settings."
            echo "This is a required variable and the workflow cannot proceed without it."
            exit 1
          else
            echo "DB_PASSWORD is set."
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_OUTPUT
          fi

          # Check if SECRET_ENCRYPTION_PASSWORD is set
          if [ -z "${{ secrets.SECRET_ENCRYPTION_PASSWORD }}" ]; then
            echo "ERROR: SECRET_ENCRYPTION_PASSWORD secret is not set."
            echo "You must set the SECRET_ENCRYPTION_PASSWORD secret in your GitHub repository settings."
            echo "This is a required variable and the workflow cannot proceed without it."
            exit 1
          else
            echo "SECRET_ENCRYPTION_PASSWORD is set."
            echo "SECRET_ENCRYPTION_PASSWORD=${{ secrets.SECRET_ENCRYPTION_PASSWORD }}" >> $GITHUB_OUTPUT
          fi

          # Check if SECRET_ENCRYPTION_SALT is set
          if [ -z "${{ secrets.SECRET_ENCRYPTION_SALT }}" ]; then
            echo "ERROR: SECRET_ENCRYPTION_SALT secret is not set."
            echo "You must set the SECRET_ENCRYPTION_SALT secret in your GitHub repository settings."
            echo "This is a required variable and the workflow cannot proceed without it."
            exit 1
          else
            echo "SECRET_ENCRYPTION_SALT is set."
            echo "SECRET_ENCRYPTION_SALT=${{ secrets.SECRET_ENCRYPTION_SALT }}" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Plan
        working-directory: infra/tf
        id: plan
        run: |
          # Use the variables from the check-vars step
          terraform plan ${{ steps.check-dynamodb.outputs.LOCK_FLAG }} \
            -var-file=environments/${{ github.event.inputs.environment || 'dev' }}.tfvars \
            -var="db_password=${{ steps.check-vars.outputs.DB_PASSWORD }}" \
            -var="secret_encryption_password=${{ steps.check-vars.outputs.SECRET_ENCRYPTION_PASSWORD }}" \
            -var="secret_encryption_salt=${{ steps.check-vars.outputs.SECRET_ENCRYPTION_SALT }}" \
            -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infra/tf/tfplan
          retention-days: 1

  approval:
    name: Approval
    needs: terraform-plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Manual approval
        run: echo "Deployment approved for ${{ github.event.inputs.environment || 'dev' }}"

  terraform-apply:
    name: Terraform Apply
    needs: approval
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check Required Variables
        id: check-vars-apply
        run: |
          # Check if DB_PASSWORD is set
          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then
            echo "ERROR: DB_PASSWORD secret is not set."
            echo "You must set the DB_PASSWORD secret in your GitHub repository settings."
            echo "This is a required variable and the workflow cannot proceed without it."
            exit 1
          else
            echo "DB_PASSWORD is set."
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_OUTPUT
          fi

          # Check if SECRET_ENCRYPTION_PASSWORD is set
          if [ -z "${{ secrets.SECRET_ENCRYPTION_PASSWORD }}" ]; then
            echo "ERROR: SECRET_ENCRYPTION_PASSWORD secret is not set."
            echo "You must set the SECRET_ENCRYPTION_PASSWORD secret in your GitHub repository settings."
            echo "This is a required variable and the workflow cannot proceed without it."
            exit 1
          else
            echo "SECRET_ENCRYPTION_PASSWORD is set."
            echo "SECRET_ENCRYPTION_PASSWORD=${{ secrets.SECRET_ENCRYPTION_PASSWORD }}" >> $GITHUB_OUTPUT
          fi

          # Check if SECRET_ENCRYPTION_SALT is set
          if [ -z "${{ secrets.SECRET_ENCRYPTION_SALT }}" ]; then
            echo "ERROR: SECRET_ENCRYPTION_SALT secret is not set."
            echo "You must set the SECRET_ENCRYPTION_SALT secret in your GitHub repository settings."
            echo "This is a required variable and the workflow cannot proceed without it."
            exit 1
          else
            echo "SECRET_ENCRYPTION_SALT is set."
            echo "SECRET_ENCRYPTION_SALT=${{ secrets.SECRET_ENCRYPTION_SALT }}" >> $GITHUB_OUTPUT
          fi

      - name: Check DynamoDB permissions
        id: check-dynamodb-apply
        run: |
          # Get the DynamoDB table name from the backend config
          DYNAMODB_TABLE=$(grep -o 'dynamodb_table = "[^"]*"' infra/tf/backend.${{ github.event.inputs.environment || 'dev' }}.tfbackend | cut -d'"' -f2)
          echo "DynamoDB table for state locking: $DYNAMODB_TABLE"

          # Check if we have permissions to access the DynamoDB table
          if ! aws dynamodb describe-table --table-name $DYNAMODB_TABLE 2>/dev/null; then
            echo "Warning: No permissions to access DynamoDB table $DYNAMODB_TABLE"
            echo "Will disable state locking for this run"
            echo "LOCK_FLAG=-lock=false" >> $GITHUB_OUTPUT
          else
            echo "DynamoDB permissions verified"
            echo "LOCK_FLAG=" >> $GITHUB_OUTPUT
          fi

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: infra/tf

      - name: Terraform Init
        working-directory: infra/tf
        run: |
          terraform init -backend-config=backend.${{ github.event.inputs.environment || 'dev' }}.tfbackend ${{ steps.check-dynamodb-apply.outputs.LOCK_FLAG }}

      - name: Terraform Apply
        working-directory: infra/tf
        run: |
          # Note: We're using the plan file, but for some variables like passwords,
          # Terraform might still ask for input during apply, so we provide them again
          terraform apply ${{ steps.check-dynamodb-apply.outputs.LOCK_FLAG }} \
            -var="db_password=${{ steps.check-vars-apply.outputs.DB_PASSWORD }}" \
            -var="secret_encryption_password=${{ steps.check-vars-apply.outputs.SECRET_ENCRYPTION_PASSWORD }}" \
            -var="secret_encryption_salt=${{ steps.check-vars-apply.outputs.SECRET_ENCRYPTION_SALT }}" \
            -auto-approve tfplan
