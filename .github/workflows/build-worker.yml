name: Build and Deploy Worker

on:
  push:
    branches:
      - main
    paths:
      - 'worker/**'
      - 'shared/**'
      - '.github/workflows/build-worker.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build and Push Worker Image
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: flow-builder-${{ secrets.ENVIRONMENT }}-worker
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Check if repository exists, create if it doesn't
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || \
            aws ecr create-repository --repository-name ${ECR_REPOSITORY}

          # Build a docker container and push it to ECR with retry logic
          for i in 1 2 3; do
            echo "Attempt $i: Building and pushing Docker image..."
            if docker buildx build \
              --platform linux/amd64 \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
              --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
              --push \
              -f worker/Dockerfile .; then
              echo "Docker build and push successful!"
              break
            else
              echo "Docker build or push failed. Retrying in 10 seconds..."
              sleep 10
              if [ $i -eq 3 ]; then
                echo "All retry attempts failed."
                exit 1
              fi
            fi
          done

          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Force ECS Service Update
        run: |
          # Get the cluster name from Terraform output or use the default naming convention
          CLUSTER_NAME="flow-builder-${{ secrets.ENVIRONMENT }}-cluster"

          # Check if the cluster exists
          if aws ecs describe-clusters --clusters $CLUSTER_NAME --query 'clusters[0].clusterName' --output text; then
            echo "Cluster $CLUSTER_NAME found. Checking for worker service..."

            # Get the full service name - it might include the environment prefix
            FULL_SERVICE_NAME="flow-builder-${{ secrets.ENVIRONMENT }}-worker-service"

            # Try to update with the simple name first, then with the full name if that fails
            if aws ecs describe-services --cluster $CLUSTER_NAME --services $FULL_SERVICE_NAME --query 'services[0].serviceName' --output text 2>/dev/null; then
              echo "Updating ECS service '$FULL_SERVICE_NAME' in cluster $CLUSTER_NAME"
              aws ecs update-service \
                --cluster $CLUSTER_NAME \
                --service $FULL_SERVICE_NAME \
                --force-new-deployment
            else
              echo "Service '$FULL_SERVICE_NAME' not found in cluster $CLUSTER_NAME."
              echo "Available services in cluster:"
              aws ecs list-services --cluster $CLUSTER_NAME
            fi
          else
            echo "Cluster $CLUSTER_NAME not found. Skipping service update."
          fi
