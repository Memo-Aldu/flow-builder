name: Build and Deploy API

on:
  push:
    branches:
      - main
    paths:
      - 'api/**'
      - 'shared/**'
      - '.github/workflows/build-api.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build and Push API Image
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check if API is deployed on AWS
        id: check-aws-deployment
        run: |
          # Check if the ECR repository exists
          ECR_REPOSITORY="flow-builder-${{ secrets.ENVIRONMENT }}-api"
          if aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} 2>/dev/null; then
            echo "AWS_DEPLOYMENT=true" >> $GITHUB_OUTPUT
            echo "ECR repository ${ECR_REPOSITORY} exists. Will build and push to ECR."
          else
            echo "AWS_DEPLOYMENT=false" >> $GITHUB_OUTPUT
            echo "ECR repository ${ECR_REPOSITORY} does not exist. Skipping ECR push."
            echo "This is expected if the API is deployed on Render instead of AWS."
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        if: steps.check-aws-deployment.outputs.AWS_DEPLOYMENT == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: flow-builder-${{ secrets.ENVIRONMENT }}-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR with retry logic
          for i in 1 2 3; do
            echo "Attempt $i: Building and pushing Docker image..."
            if docker buildx build \
              --platform linux/amd64 \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
              --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
              --push \
              -f api/Dockerfile .; then
              echo "Docker build and push successful!"
              break
            else
              echo "Docker build or push failed. Retrying in 10 seconds..."
              sleep 10
              if [ $i -eq 3 ]; then
                echo "All retry attempts failed."
                exit 1
              fi
            fi
          done

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Force ECS Service Update
        if: steps.check-aws-deployment.outputs.AWS_DEPLOYMENT == 'true'
        run: |
          # Get the cluster name from Terraform output or use the default naming convention
          CLUSTER_NAME="flow-builder-${{ secrets.ENVIRONMENT }}-cluster"

          # Check if the cluster exists
          if aws ecs describe-clusters --clusters $CLUSTER_NAME --query 'clusters[0].clusterName' --output text; then
            echo "Updating ECS service in cluster $CLUSTER_NAME"
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service api \
              --force-new-deployment
          else
            echo "Cluster $CLUSTER_NAME not found. Skipping service update."
          fi
